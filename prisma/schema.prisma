// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Order      Order[]

  @@map("users")
}

model Product {
  id          String      @id @default(uuid()) @map("_id")
  barcode     String      @unique
  name        String
  category    String
  description String
  price       Float
  stock       Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  OrderItem   OrderItem[]

  @@map("products")
}

enum OrderStatus {
  pending
  completed
  canceled
}

model Order {
  id        String      @id @default(uuid()) @map("id")
  userId    String      @map("user_id")
  total     Decimal     @map("total")
  status    OrderStatus @default(pending) @map("status")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  products OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderId         String  @map("order_id")
  productId       String  @map("product_id")
  quantity        Int     @map("quantity")
  priceAtPurchase Decimal @map("price_at_purchase")

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([orderId, productId])
  @@map("order_items")
}
